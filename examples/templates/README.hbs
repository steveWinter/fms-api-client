<!--@h1([pkg.name])-->
# fms-api-client
<!--/@-->
[![Known Vulnerabilities](https://snyk.io/test/github/Luidog/fms-api-client/badge.svg?targetFile=package.json)](https://snyk.io/test/github/Luidog/fms-api-client?targetFile=package.json) [![Coverage Status](https://coveralls.io/repos/github/Luidog/fms-api-client/badge.svg?branch=master)](https://coveralls.io/github/Luidog/fms-api-client?branch=master) [![GitHub issues](https://img.shields.io/github/issues/Luidog/fms-api-client.svg)](https://github.com/Luidog/fms-api-client/issues) [![Github commits (since latest release)](https://img.shields.io/github/commits-since/luidog/fms-api-client/latest.svg)](https://img.shields.io/github/issues/Luidog/fms-api-client.svg) [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier) [![GitHub license](https://img.shields.io/github/license/Luidog/fms-api-client.svg)](https://github.com/Luidog/fms-api-client/blob/master/LICENSE.md)

A FileMaker Data API client designed to allow easier interaction with a FileMaker database from a web environment. This client abstracts the FileMaker Data API (since FileMaker Server v17) into class based methods.

[fms-api-client documentation](https://luidog.github.io/fms-api-client/)

## Table of Contents

- [fms-api-client](#fms-api-client)
  * [Table of Contents](#table-of-contents)
  * [License](#license)
  * [Installation](#installation)
  * [Usage](#usage)
    + [Introduction](#introduction)
    + [Parameter Syntax](#parameter-syntax)
      - [Script Array Syntax](#script-array-syntax)
      - [Portals Array Syntax](#portals-array-syntax)
      - [Data Syntax](#data-syntax)
      - [Sort Syntax](#sort-syntax)
      - [Query Syntax](#query-syntax)
    + [Datastore Connection](#datastore-connection)
    + [Client Creation](#client-creation)
    + [Client Use](#client-use)
    + [Request Queue](#request-queue)
    + [Data API Sessions](#data-api-sessions)
      - [Login Method](#login-method)
      - [Logout Method](#logout-method)
    + [Client Methods](#client-methods)
      - [Get Product Info](#product-info)
      - [Get Databases](#get-databases)
      - [Get Layouts](#get-layouts)
      - [Get scripts](#get-scripts)
      - [Get Layout Metadata](#get-layout)
      - [Create Records](#create-records)
      - [Duplicate Record](#duplicate-record)
      - [Get Record Details](#get-record-details)
      - [List Records](#list-records)
      - [Find Records](#find-records)
      - [Edit Records](#edit-records)
      - [Delete Records](#delete-records)
      - [Trigger A Script](#trigger-script)
      - [Run Multiple Scripts](#run-multiple-scripts)
      - [Upload Files](#upload-files)
      - [Set Session Globals](#set-session-globals)
      - [Get Client Status](#client-status)
      - [Reset Client](#client-reset)
    + [Utilities](#utilities)
      - [Record Id Utility](#record-id-utility)
        * [Record Id Utility Results](#record-id-utility-results)
      - [Field Data Utility](#field-data-utility)
        * [Field Data Utility Results](#field-data-utility-results)
      - [Transform Utility](#transform-utility)
        * [Transform Utility Results](#transform-utility-results)
      - [Product Info Utility](#product-info-utility)
        * [Product Info Utility Results](#product-info-utility-results)
      - [Databases Utility](#databases-utility)
        * [Databases Results](#databases-utility-results)
    + [Additional Client Capabilities](#additional-client-capabilities)
      - [Data Merge](#data-merge)
      - [Custom Request Agents](#custom-request-agents)
      - [Custom Request Parameters](#custom-request-parameters)
      - [Proxies](#proxies)
  * [Tests](#tests)
  * [Dependencies](#dependencies)
  * [Development Dependencies](#development-dependencies)

## License

MIT Â© Lui de la Parra

<!--@installation()-->
## Installation

```sh
npm install --save marpat fms-api-client
```
<!--/@-->

## Usage

### Introduction
The fms-api-client is a wrapper around the [FileMaker Data API](https://fm.mutesymphony.com/fmi/data/apidoc/). Much :heart: to FileMaker for their work on the Data API. This client attempts to follow the terminology and conventions used by FileMaker wherever possible. The client uses a lightweight datastore to hold Data API connections. For more information about datastore configuration see the [datastore connection section](#datastore-connection) and the [marpat project](https://github.com/Luidog/marpat).

Each client committed to the datastore will automatically handle Data API Sessions. If required, clients can also manually open or close their FileMaker sessions by calling either the `client.login()` method or the `client.logout()` method. To remove a client from a datastore and log out a session call `client.destroy()`. For more information on Data API Session handling see the [Data API sessions section](#data-api-sessions).

All client methods accept parameters as defined by FileMaker. The client also allows for an expanded parameter syntax designed to make interacting with the client easier. Scripts and portals can be defined as arrays. Find queries can be defined as either an object or an array. For more information on the syntax supported by the client see [the parameter syntax section](#parameter-syntax).

In addition to the expanded syntax the client will also automatically parse arrays, objects, and numbers to adhere to the requirements of the Data API. The `limit` and `offset` parameters can be either strings or a numbers. The client will also automatically convert `limit`, `find`, and `offset` parameters into their underscored conterparts as needed. Additionally, if a script result is valid JSON it will be automatically parsed for you by the client.

All methods on the client return promises and each method will reject with a message and code upon encountering an error. All messages and codes follow the FileMaker Data API codes where applicable.

The client will queue concurrent requests to the Data API. The client can be configured with a [concurrency setting](#client-creation). The client will attempt ensure that each request to the Data API is made with an valid token which is not in use. This behavior prevents request session collisions. For more information on Data API Session handling see the [request queue section](#request-queue).

The client also provides utility modules to aid in working with FileMaker Data API Results. The provided utility modules are `fieldData`, `recordId`, `containerData`, and `transform`. These utilities will accept and return either an object or an array objects. For more information on the utility modules see the [utilities section](#utilities).

### Parameter Syntax

The client supports the same parameter syntax as is found in the [Data API Documentation](https://fm.mutesymphony.com/fmi/data/apidoc/). Where appropriate and useful the client also allows additional parameters.

#### Script Array Syntax

The custom script parameter follows the following syntax:
<!--@snippet('./examples/schema/scripts-array-schema.json', { showSource: true })-->
<!--/@-->

Following the Data API, the `prerequest` phase occurs before executing request and sorting of records, the `presort` phase after executing request and before sorting records. Not specifying a phase will run the script after the request and sorting are executed.

**Note:** The FileMaker script and portal syntax will override the alternative scripts and portals parameter syntax.

#### Portals Array Syntax

The custom portals parameter follows the following syntax:
<!--@snippet('./examples/schema/portals-array-schema.json', { showSource: true })-->
<!--/@-->
If a portals array is not used all portals on a queried layout will be returned.

**Note:** The FileMaker script and portal syntax will override the alternative scripts and portals parameter syntax.

#### Data Syntax

Arrays and objects are stringified before being inserted into field or portal data.
<!--@snippet('./examples/schema/data-schema.json', { showSource: true })-->
<!--/@-->
Any property not nested in a `portalData` property will be moved into the `fieldData` property.

#### Sort Syntax

The client accepts the same sort parameters as the Data API.
<!--@snippet('./examples/schema/sort-schema.json', { showSource: true })-->
<!--/@-->

#### Query Syntax

When using the `find` method a query is required. The query can either be a single json object or an array of json objects.
<!--@snippet('./examples/schema/query-schema.json', { showSource: true })-->
<!--/@-->

### Datastore Connection

The connect method must be called before the FileMaker class is used. The connect method is not currently exposed by fms-api-client, but from the marpat dependency. marpat is a fork of camo. Thanks and love to [Scott Robinson](https://github.com/scottwrobinson) for his creation and maintenance of camo.

marpat is designed to allow the use of multiple datastores with the focus on encrypted file storage and project flexibility.

For more information on marpat and the different types of supported storage visit [marpat](https://github.com/Luidog/marpat)
<!--@snippet('./examples/index.js#datastore-connect-example', { showSource: true })-->
<!--/@-->
### Client Creation

After connecting to a datastore you can import and create clients. A client is created using the create method on the Filemaker class. The FileMaker class accepts an object with the following properties:

| Property    |   Type  |                                     Description                                     |
| ----------- | :-----: | :---------------------------------------------------------------------------------: |
| database |  <code>String</code> |                  The FileMaker database to connect to                 |
| server      |  <code>String</code> | The FileMaker server to use as the host. **Note:** Must be an http or https Domain. |
| user        |  <code>String</code> |     The FileMaker user account to be used when authenticating into the Data API     |
| password    |  <code>String</code> |                        The FileMaker user account's password.                       |
| [name]      |  <code>String</code> |                                A name for the client.                               |
| [usage]     | <code>Boolean</code> |          Track Data API usage for this client. **Note:** Default is `true`          |
| [timeout]   |  <code>Number</code> |      The default timeout time for requests **Note:** Default is 0, (no timeout)     |
| [concurrency]   |  <code>Number</code> |      The number of concurrent requests that will be made to FileMaker     |
| [proxy]     |  <code>Object</code> |                             settings for a proxy server                             |
| [agent]     |  <code>Object</code> |                         settings for a custom request agent                         |

:warning: You should only use the agent parameter when absolutely necessary. The Data API was designed to be used on https. Deviating from the intended use should be done with caution.
<!--@snippet('./examples/index.js#client-create-example', { showSource: true })-->
<!--/@-->
**Note:** The server must be an http or https domain.

A client can be used directly after saving it. The `client.save()` method takes no arguments and will either reject with an error or resolve with a useable client. The client will automatically handle Data API session creation and expiration. Once a client is saved it will be stored on the datastore for reuse later.
<!--@snippet('./examples/index.js#client-save-example', { showSource: true })-->
<!--/@-->
A client can be removed using either the `client.destroy()` method, the `Filemaker.deleteOne(query)` method or the `Filemaker.deleteMany(query)` method.

**Note** Only the `client.destroy()` method will close a FileMaker session. Any client removed using the the `Filemaker.deleteOne(query)` method or the `Filemaker.deleteMany(query)` method will not log out before being destroyed.

### Client Use

A client can be used after it is created and saved or recalled from the datastore. The `Filemaker.find(query)` or `Filemaker.findOne(query)` methods can be used to recall clients. The `Filemaker.findOne(query)` method will return either one client or null. The `Filemaker.find(query)` will return either an empty array or an array of clients. All public methods on the client return promises.
<!--@snippet('./examples/create.examples.js#create-many-records', { showSource: true })-->
<!--/@-->
Results:
<!--@snippet('./examples/results/create-many-records-example.json', { showSource: true })-->
<!--/@-->
### Request Queue

The client will automatically queue a requests to the FileMaker Data API if there are no available sessions to make the request. The client will ensure that a session is not in use or expired before it uses a session token in a request. This functionality is designed to prevent session collisions. The client will open and use a new session up to the configured concurrency limit. The concurrency limit is set when a client is created. By default the concurrency limit is one.

### Data API Sessions

The client will automatically handle creating and closing Data API sessions. If a new session is required the client will authenticate and generate a new session or queue requests if the session limit has been reached.

The Data API session is also monitored, updated, and saved as the client interacts with the Data API. The client will always attempt to reuse a valid token whenever possible.

The client contains two methods related to Data API sessions. These methods are `client.login()` and `client.logout()`. The login method is used to start a Data API session and the logout method will end a Data API session.

#### Login Method

The client will automatically call the login method if it does not have a valid token. This method returns an object with a token property. This method will also save the token to the client's connection for future use.

`client.login()`
<!--@snippet('./examples/authentication.examples.js#client-login-example', { showSource: true })-->
<!--/@-->
#### Logout Method

The logout method is used to end a Data API session. This method will also remove the current client's authentication token. The logout method accepts an optional id parameter. The logout method will use the id parameter as the session to target for ending.

`client.logout(id)`
<!--@snippet('./examples/authentication.examples.js#client-logout-example', { showSource: true })-->
<!--/@-->
### Client Methods

#### Product Info

A client can get server product info. The productInfo method will return metadata about the FileMaker server the client is configured to use.

`client.productInfo()`

{{#functions name="productInfo" memberof="client"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/metadata.examples.js#product-info-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/product-info-example.json', { showSource: true })-->
<!--/@-->
#### Get Databases

A client can get the databases accessible using the configured credentials. This method will return all databases hosted by the currently configured server that the client can connect to. An alternative set of credentials can be passed to this method to check what databases alternate credentials are able to access.

`client.databases(credentials)`

{{#functions name="databases" memberof="client"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/metadata.examples.js#databases-info-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/databases-info-example.json', { showSource: true })-->
<!--/@-->
#### Get Layouts

The layouts method will return a list of layouts accessible by the configured client.

`client.layouts()`

{{#functions name="layouts"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/metadata.examples.js#layouts-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/layouts-example.json', { showSource: true })-->
<!--/@-->
#### Get Scripts

The scripts method will return metadata for the scripts accessible by the configured client.

`client.scripts()`

{{#functions name="scripts"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/metadata.examples.js#scripts-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/scripts-example.json', { showSource: true })-->
<!--/@-->
#### Get Layout

The layout method will get metadata for the specified layout.

`client.layout(layout)`

{{#functions name="layout"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/metadata.examples.js#layout-details-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/layout-details-example.json', { showSource: true })-->
<!--/@-->

#### Create Records

Using the client you can create filemaker records. To create a record specify the layout to use and the data to insert on creation. The client will automatically convert numbers, arrays, and objects into strings so they can be inserted into a filemaker field. The create method will automatically create a `fieldData` property and add all data to that property if there is no fieldData property present. The client will preserve the contents of the `portalData` property.

`client.create(layout, data, parameters)`

{{#functions name="create"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/create.examples.js#create-record-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/create-record-example.json', { showSource: true })-->
<!--/@-->
The create method also allows you to trigger scripts when creating a record. Notice the scripts property in the following example. You can specify scripts to run using either FileMaker's script.key syntax or specify an array of in a `scripts` property. The script objects should have with `name`, optional `phase`, and optional  `params` parameters. For more information see the scripts syntax example in the introduction.
<!--@snippet('./examples/create.examples.js#trigger-scripts-on-create', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/trigger-scripts-on-create-example.json', { showSource: true })-->
<!--/@-->
#### Duplicate Record

The duplicate method duplicates the FileMaker record using the layout and recordId parameters passed to it.

`client.duplicate(layout, recordId, parameters)`

{{#functions name="duplicate"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/duplicate.examples.js#duplicate-record-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/duplicate-record-example.json', { showSource: true })-->
<!--/@-->
The duplicate method also allows you to trigger scripts when duplicating a record. Notice the scripts property in the following example. You can specify scripts to run using either FileMaker's script.key syntax or specify an array of in a `scripts` property. The script objects should have with `name`, optional `phase`, and optional  `params` parameters. For more information see the scripts syntax example in the introduction.
<!--@snippet('./examples/create.examples.js#trigger-scripts-on-create', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/trigger-scripts-on-create-example.json', { showSource: true })-->
<!--/@-->
#### Get Record Details

The Get method will return a specific FileMaker record based on the recordId passed to it. The recordId can be a string or a number.

`client.get(layout, recordId, parameters)`

{{#functions name="get"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/get.examples.js#get-record-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/get-record-example.json', { showSource: true })-->
<!--/@-->

#### List Records

You can use the client to list filemaker records. The list method accepts a layout and parameter variable. The client will automatically santize the limit, offset, and sort keys to correspond with the DAPI's requirements.

`client.list(layout, parameters)`

{{#functions name="list"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/list.examples.js#list-records-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/list-records-example.json', { showSource: true })-->
<!--/@-->

#### Find Records

The client's find method will accept either a single object as find parameters or an array. The find method will also santize the limit, sort, and offset parameters to conform with the Data API's requirements.

`client.find(layout, query, parameters)`

{{#functions name="find"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/find.examples.js#find-records-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/find-records-example.json', { showSource: true })-->
<!--/@-->
#### Edit Records

The client's edit method requires a layout, recordId, and object to use for updating the record.

`client.edit(layout, recordId, data, parameters)`

{{#functions name="edit"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/edit.examples.js#edit-record-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/edit-record-example.json', { showSource: true })-->
<!--/@-->
#### Delete Records

The client's delete method requires a layout and a record id. The recordId can be a number or a string.

`client.delete(layout, recordId, parameters)`

{{#functions name="delete"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/delete.examples.js#delete-record-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/delete-record-example.json', { showSource: true })-->
<!--/@-->
#### Trigger Script

The client's script method will trigger a script. You can also trigger scripts with the create, edit, list, find, and delete methods. This method performs a list with a limit of one on the specified layout before triggering the script. this is the most lightweight request possible while still being able to trigger a script.

`client.script(layout, script, param, parameters)`

{{#functions name="script"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/script.examples.js#script-trigger-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/script-trigger-example.json', { showSource: true })-->
<!--/@-->

#### Run Multiple Scripts

The client's script method will trigger a script. You can also trigger scripts with the create, edit, list, find, and delete methods. This method performs a list with a limit of one on the specified layout before triggering the script. this is the most lightweight request possible while still being able to trigger a script.

`client.run(layout, scripts,parameters)`

{{#functions name="run"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/scripts.examples.js#run-scripts-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/run-scripts-example.json', { showSource: true })-->
<!--/@-->
#### Upload Files

The upload method will upload binary data to a container. The file parameter should be either a path to a file or a buffer. If you need to set a field repetition, you can set that in parameters. If recordId is 0 or undefined a new record will be created.

`client.upload(file, layout, container, recordId, parameters)`

{{#functions name="upload"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/upload.examples.js#upload-image-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/upload-image-example.json', { showSource: true })-->
<!--/@-->
You can also provide a record Id to the upload method and the file will be uploaded to that
record.

<!--@snippet('./examples/upload.examples.js#upload-specific-record-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/upload-specific-record-example.json', { showSource: true })-->
<!--/@-->
#### Set Session Globals

The globals method will set global fields for the current session.

`client.globals(data, parameters)`

{{#functions name="globals"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/globals.examples.js#set-globals-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/set-globals-example.json', { showSource: true })-->
<!--/@-->
#### Client Status

The client status method will return an object description the current client's connection status. This method will return overall client data usage, urls for pending and queued requests and current session information.

`client.status()`

{{#functions name="status"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#client-status-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/client-status-example.json', { showSource: true })-->
<!--/@-->
#### Client Reset

The client reset method will drop all pending and queued requests while also clearing all open sessions.

:warning: This method is experimental. It does not reject pending or queued requests before clearing them. Use with caution.

`client.reset()`

{{#functions name="reset"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#client-reset-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/client-reset-example.json', { showSource: true })-->
<!--/@-->

### Utilities

The client also provides utilities to aid in parsing and manipulating FileMaker Data. The client exports the `recordId(data)`, `fieldData(data)`, and `transform(data, options)` to aid in transforming Data API response data into other formats. Each utility is capable of recieving either an object or a array.

#### Record Id Utility

The record id utility retrieves the `recordId` properties for a response. This utility will return either a single string or an array of strings.

`recordId(data)`

{{#functions name="recordId"}}
{{>parameters}}
{{/functions}}

<!--@snippet('./examples/utility.examples.js#record-id-utility-example', { showSource: true })-->
<!--/@-->
##### Record Id Utility Results
original:
<!--@snippet('./examples/results/record-id-utility-original-example.json', { showSource: true })-->
<!--/@-->
Transformed:
<!--@snippet('./examples/results/record-id-utility-example.json', { showSource: true })-->
<!--/@-->
#### Field Data Utility

The field data utility retrieves the `fieldData`, `recordId`, and `modId` properties from a Data API response. The fieldData utility will merge the `recordId` and `modId` properties into fielData properties. This utility will not convert `table::field` properties.

`fieldData(data)`

{{#functions name="fieldData"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#field-data-utility-example', { showSource: true })-->
<!--/@-->
##### Field Data Utility Results
Original:
<!--@snippet('./examples/results/field-data-utility-original-example.json', { showSource: true })-->
<!--/@-->
Transformed:
<!--@snippet('./examples/results/field-data-utility-example.json', { showSource: true })-->
<!--/@-->
#### Transform Utility

The transform utility converts Data API response data by converting `table::field` properties into objects. This utility will traverse the response data converting `{ table::field : value}` properties to `{ table:{ field : value } }`. This utility will also convert `portalData` into arrays of objects.

The transform utility accepts three option properties. The three option properties are all booleans and true by default. The properties are `convert`,`fieldData`,`portalData`. The `convert` property toggles the transformation of `table::field` properties. The `fieldData` property toggles merging of fieldData to the result. The `portalData` property toggles merging portalData to the result. Setting any property to false  will turn that transformation off.

`transform(data, parameters)`

{{#functions name="transform"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#transform-utility-example', { showSource: true })-->
<!--/@-->
##### Transform Utility Results
Original:
<!--@snippet('./examples/results/transform-utility-original-example.json', { showSource: true })-->
<!--/@-->
Transformed:
<!--@snippet('./examples/results/transform-utility-example.json', { showSource: true })-->
<!--/@-->

#### Container Data Utility

The container data utility will retrieve FileMaker container data by following the links returned by the Data API. This utility will accept either a single data object or an array of objects. The utility will use the `field` parameter to target container data urls in the data parameter. This utility also requires a `name` parameter which will be used to target a data property that should be used as the file's name. If a name parameter is provided that is not a property or nested property in the `data` parameter, the name parameter itself will be used. The `destination` parameter should be either 'buffer' to indicate that an object with a file's name and buffer should be returned or the path, relative to the current working directory, where the utility should write container data to a file. This utility will also accept optional request `parameters` to modify the http request.

`containerData(data, field, destination, name, parameters)`

{{#functions name="containerData"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#container-data-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/container-data-example.json', { showSource: true })-->
<!--/@-->

#### Databases Utility

The databases utility will get the accessible databases for the server and credentials passed to it.

`databases(server, credentials, version, parameters)`

{{#functions name="databases" memberof="Metadata Service"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#databases-utility-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/databases-utility-example.json', { showSource: true })-->
<!--/@-->

#### Product Info Utility

The productInfo utility will get Data API information for the server passed to it.

`productInfo(host, version, parameters)`

{{#functions name="productInfo" memberof="Metadata Service"}}
{{>parameters}}
{{/functions}}
<!--@snippet('./examples/utility.examples.js#product-info-utility-example', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/product-info-utility-example.json', { showSource: true })-->
<!--/@-->
### Additional Client Capabilities

#### Data Merge

Both the create method and the edit method accept a merge boolean in their option parameters. If the `merge` property is true the data used to create or edit the filemaker record will be merged with the FileMaker Data API results.

<!--@snippet('./examples/create.examples.js#create-record-merge', { showSource: true })-->
<!--/@-->
Result:
<!--@snippet('./examples/results/create-record-merge-example.json', { showSource: true })-->
<!--/@-->

#### Custom Request Agents

The client has the ability to create custom agents and modify requests parameters or use a proxy. Agents, request parameters, and proxies can be configured either when the client is created or when a request is being made.

A client can have a custom [Agent](https://nodejs.org/api/http.html#http_class_http_agent). Using a custom request agent will allow you to configure an agent designed for your specific needs. A request agent can be configured to not reject unauthorized request such as those with invalid SSLs, keep the connection alive, or limit the number of sockets to a host. There is no need to create an agent unless theses options are needed.

**Note** If you are using a custom agent you are responsible for destroying that agent with `client.destroy` once the agent is no longer used.

#### Custom Request Parameters

All client methods except `client.login()` and `client.logout()` accept request parameters. These parameters are `request.proxy` and `request.timeout`, `request.agent`. These properties will apply only to the current request.

#### Proxies

The client can be configured to use a proxy. The proxy can be configured either for every request by specifying the proxy during the creation of the client, or just for a particular request by specifying the proxy in the request parameters.

## Tests

```sh
npm install
npm test
```
<!--@execute('npm run test',[])-->
<!--/@-->
<!--@dependencies()-->
<!--/@-->
<!--@devDependencies()-->
<!--/@-->
